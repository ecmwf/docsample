├── my_python_project
│   ├── src
│   │   ├── my_library
│   │   │   ├── __init__.py
│   │   │   ├── core.py
│   │   │   ├── utils.py
│   │   │   └── cli_tool.py
│   ├── notebooks
│   │   └── example_notebook.ipynb
│   ├── docs
│   │   ├── conf.py
│   │   ├── index.rst
│   │   ├── api.rst
│   │   ├── usage.rst
│   │   └── _themes
│   │       └── ecmwf
│   │           ├── theme.conf
│   │           └── static
│   │               └── custom.css
│   ├── pyproject.toml
│   ├── README.md
│   └── .gitignore

# Updated Structure Explanation:
# 1. Added a custom Sphinx theme named "ECMWF" under `docs/_themes/ecmwf`.
# 2. The custom theme includes a `theme.conf` file and a `static/custom.css` file for styling.

# Below is the updated content for key files:

# src/my_library/__init__.py
"""My Python Project: Library Initialization"""
__version__ = "0.1.0"

# src/my_library/core.py
"""Core functionality of the library."""
def main_feature(x):
    return f"Processing {x}..."

# src/my_library/utils.py
"""Utility functions for the library."""
def helper_function(y):
    return y.upper()

# src/my_library/cli_tool.py
"""Command-line interface for My Python Project."""
import argparse
from .core import main_feature

def main():
    parser = argparse.ArgumentParser(description="CLI for My Python Project")
    parser.add_argument("input", type=str, help="Input string to process.")
    args = parser.parse_args()
    print(main_feature(args.input))

if __name__ == "__main__":
    main()

# docs/conf.py
# Sphinx configuration file
import os
import sys

sys.path.insert(0, os.path.abspath('../../src'))

project = 'My Python Project'
author = 'Your Name'
release = '0.1.0'
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon'
]
exclude_patterns = []
html_theme = 'ecmwf'
html_theme_path = ['_themes']

# docs/_themes/ecmwf/theme.conf
[theme]
inherit = default
stylesheet = static/custom.css

# docs/_themes/ecmwf/static/custom.css
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    color: #333;
}

h1, h2, h3 {
    color: #005ea8;
}

# docs/index.rst
"""
My Python Project
=================

Welcome to the documentation for My Python Project.

.. toctree::
   :maxdepth: 2
   :caption: Contents:

   api
   usage
"""

# docs/api.rst
"""
API Reference
==============

.. automodule:: my_library.core
   :members:

.. automodule:: my_library.utils
   :members:
"""

# docs/usage.rst
"""
Usage Guide
===========

### Command Line Interface
Run the CLI using:

```
python -m my_library.cli_tool <input>
```

### Notebook
Open `notebooks/example_notebook.ipynb` for a demonstration.
"""

# pyproject.toml
[build-system]
requires = [
    "setuptools>=42",
    "wheel"
]
build-backend = "setuptools.build_meta"

[project]
name = "my_python_project"
version = "0.1.0"
description = "A Python project template with library, CLI, notebook, and Sphinx docs."
readme = "README.md"
requires-python = ">=3.7"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

[project.scripts]
my-cli = "my_library.cli_tool:main"

[tool.sphinx]
project = "My Python Project"

# README.md
"""
# My Python Project

A project template containing a library, CLI, Jupyter Notebook, and Sphinx documentation.

## Installation

```bash
pip install .
```

## Usage

### Library

```python
from my_python_project.core import main_feature
print(main_feature("Hello"))
```

### CLI

```bash
my-cli Hello
```

### Notebook

Open `notebooks/example_notebook.ipynb`.
"""

# .gitignore
# Ignore common files
__pycache__/
*.pyc
*.ipynb_checkpoints
docs/_build/